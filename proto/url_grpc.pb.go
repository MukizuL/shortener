// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/url.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Shortener_CreateGRPC_FullMethodName         = "/shortener.Shortener/CreateGRPC"
	Shortener_CreateBatchGRPC_FullMethodName    = "/shortener.Shortener/CreateBatchGRPC"
	Shortener_GetOriginalURLGRPC_FullMethodName = "/shortener.Shortener/GetOriginalURLGRPC"
	Shortener_GetUserURLsGRPC_FullMethodName    = "/shortener.Shortener/GetUserURLsGRPC"
	Shortener_DeleteGRPC_FullMethodName         = "/shortener.Shortener/DeleteGRPC"
	Shortener_GetStatsGRPC_FullMethodName       = "/shortener.Shortener/GetStatsGRPC"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	CreateGRPC(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	CreateBatchGRPC(ctx context.Context, in *CreateBatchShortURLRequest, opts ...grpc.CallOption) (*CreateBatchShortURLResponse, error)
	GetOriginalURLGRPC(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error)
	GetUserURLsGRPC(ctx context.Context, in *GetUserURLRequest, opts ...grpc.CallOption) (*GetUserURLResponse, error)
	DeleteGRPC(ctx context.Context, in *DeleteShortURLRequest, opts ...grpc.CallOption) (*DeleteShortURLResponse, error)
	GetStatsGRPC(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) CreateGRPC(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, Shortener_CreateGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) CreateBatchGRPC(ctx context.Context, in *CreateBatchShortURLRequest, opts ...grpc.CallOption) (*CreateBatchShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBatchShortURLResponse)
	err := c.cc.Invoke(ctx, Shortener_CreateBatchGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetOriginalURLGRPC(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOriginalURLResponse)
	err := c.cc.Invoke(ctx, Shortener_GetOriginalURLGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetUserURLsGRPC(ctx context.Context, in *GetUserURLRequest, opts ...grpc.CallOption) (*GetUserURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserURLResponse)
	err := c.cc.Invoke(ctx, Shortener_GetUserURLsGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteGRPC(ctx context.Context, in *DeleteShortURLRequest, opts ...grpc.CallOption) (*DeleteShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShortURLResponse)
	err := c.cc.Invoke(ctx, Shortener_DeleteGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetStatsGRPC(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetStatsGRPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility.
type ShortenerServer interface {
	CreateGRPC(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	CreateBatchGRPC(context.Context, *CreateBatchShortURLRequest) (*CreateBatchShortURLResponse, error)
	GetOriginalURLGRPC(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error)
	GetUserURLsGRPC(context.Context, *GetUserURLRequest) (*GetUserURLResponse, error)
	DeleteGRPC(context.Context, *DeleteShortURLRequest) (*DeleteShortURLResponse, error)
	GetStatsGRPC(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenerServer struct{}

func (UnimplementedShortenerServer) CreateGRPC(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGRPC not implemented")
}
func (UnimplementedShortenerServer) CreateBatchGRPC(context.Context, *CreateBatchShortURLRequest) (*CreateBatchShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchGRPC not implemented")
}
func (UnimplementedShortenerServer) GetOriginalURLGRPC(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURLGRPC not implemented")
}
func (UnimplementedShortenerServer) GetUserURLsGRPC(context.Context, *GetUserURLRequest) (*GetUserURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLsGRPC not implemented")
}
func (UnimplementedShortenerServer) DeleteGRPC(context.Context, *DeleteShortURLRequest) (*DeleteShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGRPC not implemented")
}
func (UnimplementedShortenerServer) GetStatsGRPC(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsGRPC not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}
func (UnimplementedShortenerServer) testEmbeddedByValue()                   {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	// If the following call pancis, it indicates UnimplementedShortenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_CreateGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CreateGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateGRPC(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_CreateBatchGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateBatchGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CreateBatchGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateBatchGRPC(ctx, req.(*CreateBatchShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetOriginalURLGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetOriginalURLGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetOriginalURLGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetOriginalURLGRPC(ctx, req.(*GetOriginalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetUserURLsGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetUserURLsGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetUserURLsGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetUserURLsGRPC(ctx, req.(*GetUserURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteGRPC(ctx, req.(*DeleteShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetStatsGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetStatsGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetStatsGRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetStatsGRPC(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGRPC",
			Handler:    _Shortener_CreateGRPC_Handler,
		},
		{
			MethodName: "CreateBatchGRPC",
			Handler:    _Shortener_CreateBatchGRPC_Handler,
		},
		{
			MethodName: "GetOriginalURLGRPC",
			Handler:    _Shortener_GetOriginalURLGRPC_Handler,
		},
		{
			MethodName: "GetUserURLsGRPC",
			Handler:    _Shortener_GetUserURLsGRPC_Handler,
		},
		{
			MethodName: "DeleteGRPC",
			Handler:    _Shortener_DeleteGRPC_Handler,
		},
		{
			MethodName: "GetStatsGRPC",
			Handler:    _Shortener_GetStatsGRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/url.proto",
}
